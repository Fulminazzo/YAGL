plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco-report-aggregation'
    id 'io.freefair.lombok' version libs.versions.delombok
}

group = 'it.angrybear'
version = '4.0'

final def TEST_MODULE = "testing"
final def VERSION_VARIABLE = "MINECRAFT_VERSION"

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco-report-aggregation'
    apply plugin: 'io.freefair.lombok'

    group = "${rootProject.group}"
    version = "${rootProject.version}"
    description = 'Yet Another GUI Library to create and manage custom items and user interfaces in Minecraft.'

    def latest_version = libs.versions.spigot.latest.get()
    def legacy_version = libs.versions.spigot.legacy.get()
    def obsolete_version = libs.versions.spigot.obsolete.get()

    this.ext.getParentFromProject = { project ->
        return new HashMap<>(project.getProperties()).get("parent")
    }

    this.ext.getProjectGroupId = {
        String groupId = ""
        Project tmp = parent
        while (tmp != null) {
            groupId = "${tmp.name}.${groupId}"
            tmp = getParentFromProject(tmp)
        }
        if (groupId.size() > 0)
            groupId = "." + groupId.substring(0, groupId.length() - 1)
        return "${rootProject.group}${groupId}"
    }

    this.ext.getMinecraftVersion = {
        def minecraftVersion = System.getenv(VERSION_VARIABLE)
        if (minecraftVersion == null) minecraftVersion = libs.versions.spigot.latest.get()
        return minecraftVersion
    }

    repositories {
        mavenCentral()
        maven {
            name = "spigotmc-repo"
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url = 'https://oss.sonatype.org/content/repositories/central' }
        maven {
            name = "JitPack"
            url = "https://jitpack.io"
        }
        maven {
            name = "Fulminazzo repository"
            url = "https://repo.fulminazzo.it/releases"
        }
    }

    dependencies {
        compileOnly libs.lombok
        annotationProcessor libs.lombok
        compileOnly libs.annotations
        testCompileOnly libs.annotations

        implementation libs.fulmicollection

        def projectName = project.name

        if (projectName.contains("serializer")) api(libs.yamlparser)

        if (projectName.contains("bukkit")) {
            compileOnly libs.spigot
            testCompileOnly libs.spigot.latest
            testRuntimeOnly "org.spigotmc:spigot-api:${latest_version}"

            String numVersion = latest_version.substring(2, latest_version.indexOf(".", 2))
            def index = numVersion.indexOf("-")
            if (index != -1) numVersion = numVersion.substring(0, index)
            if (Double.valueOf(numVersion) >= 13) testImplementation libs.jbukkit
            else testImplementation libs.jbukkit.legacy
        }

        if (projectName.contains("legacy")) {
            testCompileOnly libs.spigot.legacy
            testRuntimeOnly "org.spigotmc:spigot-api:${legacy_version}"

            testImplementation libs.jbukkit.legacy
        }

        if (projectName.contains("obsolete")) {
            testCompileOnly libs.spigot.obsolete
            testRuntimeOnly "org.spigotmc:spigot-api:${obsolete_version}"

            testImplementation libs.jbukkit.legacy
        }

        if (projectName.contains("-")) {
            def name = projectName.substring(0, projectName.indexOf("-"))
            def id = projectName.substring(projectName.indexOf("-") + 1)
            if (!projectName.contains("base")) api(project(":${name}:${name}-base"))
            if (name != "common" && id != "legacy" && id != "obsolete")
                api(project(":common:common-${id}"))
        }

        if (!projectName.contains("-"))
            subprojects.findAll { (it.name != TEST_MODULE) } .each {api project(it.path)}

        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok

        if (!project.name.equals(TEST_MODULE)) testImplementation project(":" + TEST_MODULE)
    }

    if (project.name.equals(TEST_MODULE)) return

    test {
        def projectName = project.name

        if (System.getenv(VERSION_VARIABLE) == null) {
            if (projectName.contains("bukkit")) environment VERSION_VARIABLE, latest_version
            else if (projectName.contains("legacy")) environment VERSION_VARIABLE, legacy_version
            else if (projectName.contains("obsolete")) environment VERSION_VARIABLE, obsolete_version
        }

        def env = System.getenv(VERSION_VARIABLE)
        if (env != null) println "Testing ${projectName} with Minecraft ${env}"
        useJUnitPlatform()
    }

    tasks.register("testBukkit") {
        final def minecraftVersion = getMinecraftVersion()
        println "Using Minecraft version ${minecraftVersion}"
        latest_version = minecraftVersion
        legacy_version = minecraftVersion
        obsolete_version = minecraftVersion

        subprojects.findAll { it.path.contains("bukkit") }.each {dependsOn "${it.path}:test" }
    }

    tasks.register('sourcesJar', Jar) {
        from sourceSets.main.delombokTask
        archiveClassifier = 'sources'
    }

    tasks.register('javadocJar', Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = getProjectGroupId()
                artifactId = "${project.name}"
                version = "${rootProject.version}"

                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }

        repositories {
            maven {
                url "https://repo.fulminazzo.it/releases"
                credentials {
                    username = System.getenv("REPO_USERNAME")
                    password = System.getenv("REPO_PASSWORD")
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}

testCodeCoverageReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = true
    }
}