plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco-report-aggregation'
    id 'com.github.johnrengelman.shadow' version libs.versions.shadow
    id 'io.freefair.lombok' version libs.versions.delombok
}

group = 'it.angrybear'
version = '4.0'

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco-report-aggregation'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'io.freefair.lombok'

    group = "${rootProject.group}"
    version = "${rootProject.version}"
    description = 'Yet Another GUI Library to create and manage custom items and user interfaces in Minecraft.'
    final String author = 'Fulminazzo'

    this.ext.getFileName = { name ->
        if (name == null) throw new RuntimeException("getFileName(): Name cannot be null!")
        String fileName = name
        final String projectName = rootProject.name
        if (projectName != fileName) fileName = "${projectName}-" + fileName
        return fileName + "-${rootProject.version}"
    }

    this.ext.getParentFromProject = { project ->
        return new HashMap<>(project.getProperties()).get("parent")
    }

    this.ext.getProjectGroupId = {
        String groupId = ""
        Project tmp = parent
        while (tmp != null) {
            groupId = "${tmp.name}.${groupId}"
            tmp = getParentFromProject(tmp)
        }
        if (groupId.size() > 0)
            groupId = "." + groupId.substring(0, groupId.length() - 1)
        return "${rootProject.group}${groupId}"
    }

    repositories {
        mavenCentral()
        maven {
            name = "spigotmc-repo"
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url = 'https://oss.sonatype.org/content/repositories/central' }
        maven {
            name = "JitPack"
            url = "https://jitpack.io"
        }
        maven {
            name = "Fulminazzo repository"
            url = "https://repo.fulminazzo.it/releases"
        }
    }

    dependencies {
        compileOnly libs.lombok
        annotationProcessor libs.lombok
        compileOnly libs.annotations
        testCompileOnly libs.annotations

        implementation libs.fulmicollection

        def projectName = project.name

        if (projectName.contains("serializer")) api(libs.yamlparser)

        if (projectName.contains("bukkit")) {
            compileOnly libs.spigot
            testImplementation libs.spigot.latest
        }

        if (projectName.contains("-") && !projectName.contains("legacy")) {
            def name = projectName.substring(0, projectName.indexOf("-"))
            def id = projectName.substring(projectName.indexOf("-") + 1)
            if (name != "common") {
                if (id != "base") api(project(":${name}:${name}-base"))
                api(project(":common:common-${id}"))
            }
        }

        if (!projectName.contains("-"))
            subprojects.each {api project(it.path)}

        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok

        testImplementation platform(libs.junit.platform)
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testImplementation libs.mockito
    }

    test {
        useJUnitPlatform()
    }

    processResources {
        def props = [
                version: rootProject.version, name: rootProject.name,
                description: rootProject.description, author: author,
                group: rootProject.group, module: project.name
        ]
        inputs.properties props
        filteringCharset 'UTF-8'
        expand props
    }

    shadowJar {
        exclude("META-INF/**") // Removes all Maven META-INF/ files.
        archiveFileName = "${getFileName(project.name)}.jar"
        manifest {
            attributes ("Manifest-Version": "${rootProject.version}")
        }
    }

    tasks.register('sourcesJar', Jar) {
        from sourceSets.main.delombokTask
        archiveClassifier = 'sources'
    }

    tasks.register('javadocJar', Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    jar {
        enabled = true // Required for sub projects depending on sub projects
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        archiveFileName = "${getFileName(project.name)}-original.jar"

        dependsOn(processResources)
        dependsOn(shadowJar)

        manifest {
            attributes ("Manifest-Version": "${rootProject.version}")
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = getProjectGroupId()
                artifactId = "${project.name}"
                version = "${rootProject.version}"

                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }

        repositories {
            maven {
                url "https://repo.fulminazzo.it/releases"
                credentials {
                    username = System.getenv("REPO_USERNAME")
                    password = System.getenv("REPO_PASSWORD")
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

testCodeCoverageReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
    }
}